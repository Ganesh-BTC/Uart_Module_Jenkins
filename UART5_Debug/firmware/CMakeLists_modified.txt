cmake_minimum_required(VERSION 3.15)
project(UART_Module C)

set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_C_COMPILER xc32-gcc)
set(CMAKE_C_FLAGS "-mprocessor=32MX795F512L -O1 -ffunction-sections -fdata-sections -Wl,--gc-sections")

# Include directories (without Harmony paths)
include_directories(
    include
    Application/include
    HAL/include
    src
    src/system_config/default
    src/system_config/default/framework/driver
    src/system_config/default/framework/driver/usart
    src/system_config/default/framework/driver/usart/src
)

# Create minimal system implementation
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/sys_minimal.c "
#include <stdint.h>
#include <stdbool.h>

// Minimal system functions
void SYS_Initialize(void* data) { (void)data; }
void SYS_Tasks(void) { while(1) { /* main loop */ } }

// Minimal interrupt functions  
void SYS_INT_Initialize(void) {}
void SYS_INT_Enable(void) {}
void SYS_INT_Disable(void) {}
")

# Available source files (only those that exist)
set(AVAILABLE_SOURCES
    src/main.c
    ${CMAKE_CURRENT_BINARY_DIR}/sys_minimal.c
)

# Check for optional source files and add if they exist
set(OPTIONAL_SOURCES
    Application/src/App_DebugPrint.c
    HAL/src/HAL_UartPrint.c
    src/app.c
    src/init.c
    src/system_config/default/system_exceptions.c
    src/system_config/default/system_init.c
    src/system_config/default/system_interrupt.c
    src/system_config/default/system_tasks.c
    src/system_config/default/framework/driver/usart/src/drv_usart_mapping.c
    src/system_config/default/framework/driver/usart/src/drv_usart_static.c
    src/system_config/default/framework/driver/usart/src/drv_usart_static_read_write.c
    src/system_config/default/framework/system/clk/src/sys_clk_pic32mx.c
    src/system_config/default/framework/system/devcon/src/sys_devcon.c
    src/system_config/default/framework/system/devcon/src/sys_devcon_pic32mx.c
    src/system_config/default/framework/system/ports/src/sys_ports_static.c
)

foreach(src ${OPTIONAL_SOURCES})
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${src})
        list(APPEND AVAILABLE_SOURCES ${src})
        message(STATUS "Adding source: ${src}")
    else()
        message(STATUS "Skipping missing source: ${src}")
    endif()
endforeach()

add_executable(UART_Module ${AVAILABLE_SOURCES})

add_custom_command(TARGET UART_Module POST_BUILD
    COMMAND xc32-bin2hex UART_Module
    COMMENT "Generating HEX file from ELF"
)
